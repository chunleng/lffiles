###########
# Options #
###########

set icons true
set incsearch true
set incfilter true
set ratios '2:3'
set number true
set dirpreviews false
set previewer ~/.config/lf/previewer.sh
set cleaner ~/.config/lf/cleaner.sh
set promptfmt "\033[38;5;240m【  %u  %h 】\033[1m%w \033[38;5;0m\033[48;5;3m%F"


############
# Mappings #
############

# using `$SHELL` and `cd .` to ensure direnv is working
cmd direnv_shell ${{
    # Used -s to read from standard in instead of zsh -c option because lf creates an extra zombie zsh process
    echo "cd . && $1" | $SHELL --interactive -s
}}
# Remove toggle and clear delete, copy selection or filter
map <esc> :unselect; clear; setfilter

# unmap original (toggle-selection)
map <space>
map <space>b $btop
map <space>g :direnv_shell "NOAERIAL=1 EDITOR='nvim +startinsert' lazygit"
map <space>j+ $autojump -i 100
map <space>j- $autojump -d 100
map <space>j? $autojump -s|less
map <enter> %{{
    echo "Jump to: "
    read response
    lf -remote "send ${id} cd '$(autojump $response)'"
}}

# extract zip
map <space>zx %{{
    mimetype="$( file --dereference --brief --mime-type -- "$f" )"
    if [[ $mimetype = "application/x-tar" || $mimetype = "application/gzip" || $mimetype = "application/zip" ]]; then
        extract_filename=$(basename $f)
        extract_path=./${extract_filename%%.*}
        path_backoff=$(test -e ${extract_path} && echo 1)

        if test -n "${path_backoff}"; then
            while test -e ${extract_path}${path_backoff}; do
                path_backoff=$((path_backoff + 1))
            done
            extract_path=${extract_path}${path_backoff}
        fi
        mkdir -p "${extract_path}"

        if [[ $mimetype = "application/x-tar" || $mimetype = "application/gzip" ]]; then
            tar -xvf $f --directory "${extract_path}"
        else
            unzip -v $f -d "${extract_path}"
        fi
        echo "Extracted to ${extract_path}"
    else
        echo "Extraction of this filetype is not supported"
    fi
}}
cmd zip %{{
    if [[ $fs == "" ]]; then
        echo "Please select the file to archive"
    else
        zip_name=""
        while [[ $zip_name = "" ]]; do
            echo "Archive Name: "
            read zip_name
        done

        files=""
        for file in ${fs}; do
            if [[ "${PWD}" != "$(dirname $file)" ]]; then
                echo "Unable to make archive with selection from different folder"
                exit 1
            fi
            files="${files} '$(basename $file)'"
        done

        case "$1" in
            tar)
                eval "tar -cvf \"${zip_name}.tar\"$files";;
            gzip)
                eval "tar -cvzf \"${zip_name}.tar.gz\"$files";;
            zip)
                eval "zip \"${zip_name}.zip\"$files";;
            *)
                echo "${1} is a supported zip type"
        esac
    fi
}}
# create zip - tar
map <space>zct :zip tar
map <space>zcz :zip zip
map <space>zcg :zip gzip
map <c-space> ${{
    selected=$(fd --no-ignore|fzf || echo .)
    lf -remote "send ${id} cd $(dirname ${selected})"
    lf -remote "send ${id} select $(basename ${selected})"
}}

map <tab> :toggle; down
map <backtab> :up; toggle
map <c-g> %pwd
map <c-h> :set hidden!
map <c-n> :down
map <c-p> :up

map a %{{
    echo "File or Dir/: "
    read r
    [[ $r = */ ]] && mkdir -p $r || (mkdir -p `dirname $r` && touch $r)
}}

map e ${{
    # Use `+'e <filename>'` because `nvim <filename>` cannot load empty file somehow
    load_command=$(test -z "$f" -o -d "$f" || echo " +'e $f'")
    lf -remote "send ${id} direnv_shell \"nvim${load_command}\""
}}
map f :filter
map F
map gd :cd ~/Downloads/
# Vim plugin folder
map gv :cd ~/.local/share/nvim/lazy
map gw :cd ~/workspace-bootstrap
map gt %{{
    echo "Go to: "
    read response
    lf -remote "send ${id} cd  $response"
}}
map R :reload
# Select all
map V :unselect; invert
map x delete

cmd chmod $eval "chmod $1 $f"
map +r :chmod +r; reload
map -r :chmod -r; reload
map +w :chmod +w; reload
map -w :chmod -w; reload
map +x :chmod +x; reload
map -x :chmod -x; reload

# <space>c for code template function
# <space>cp for python
cmd python_init ${{
    set -eu
    trap 'catch' ERR
    function catch() {
        read -p 'Project init failed...' response
        exit 1
    }

    folder_type=$1
    shift
    package_to_install=""
    for package in "$@"; do
        package_to_install="${package_to_install} --dependency=${package}"
    done

    echo
    latest_python=$(asdf latest python)
    read -p 'Choose folder name: ' path_name
    echo "The following Python versions are installed on this machine:"
    asdf list python
    read -p "Choose Python version (${latest_python}): " py_version

    if [ -z "${py_version}" ]; then
        py_version=${latest_python}
    fi

    mkdir -p ${path_name}
    cd ${path_name}
    asdf local python ${py_version} || \
        (echo 'Python version not yet installed, installing now...' && \
         asdf install python ${py_version} && \
         asdf local python ${py_version})

    latest_poetry=`asdf latest poetry`
    asdf local poetry ${latest_poetry} || \
        (echo 'Poetry version "${latest_poetry}" not yet installed, installing now...' && \
        asdf install poetry ${latest_poetry} && \
        asdf local poetry ${latest_poetry})


    touch README.md
    echo '.venv' > .gitignore
    git init

    poetry config virtualenvs.in-project true --local
    eval poetry init -n \
        --dev-dependency=pyright \
        --dev-dependency=isort \
        --dev-dependency=black \
        ${package_to_install}
    poetry install --no-root

    # Direnv setup
    echo '# Since we are expecting the virtualenv to be in the same folder,
# we need to make poetry create the virtualenv in the same folder by doing the following
#   poetry config virtualenvs.in-project true
export VIRTUAL_ENV=`pwd`/.venv
export PATH=${VIRTUAL_ENV}/bin:${PATH}' > .envrc
    direnv allow .

    # Structure base on project
    case $folder_type in
        app)
            mkdir ${path_name}
            touch ${path_name}/__init__.py
            touch main.py
            ;;
        notebook)
            mkdir notebook
            touch notebook/sample.ipynb
            ;;
    esac
}}
map <space>cpp :python_init app
map <space>cpf :python_init app fastapi
map <space>cpn :python_init notebook euporie ipykernel

# <space>cr for rust
cmd rust_init ${{
    set -eu
    trap 'catch' ERR
    function catch() {
        read -p 'Project init failed...' response
        exit 1
    }

    echo
    latest_rust=$(asdf latest rust || echo "1.81.0")
    read -p 'Choose folder name: ' path_name
    echo "The following rust versions are installed on this machine:"
    asdf list rust
    read -p "Choose Rust version (${latest_rust}): " rust_version

    if [ -z "${rust_version}" ]; then
        rust_version=${latest_rust}
    fi

    mkdir -p ${path_name}
    cd ${path_name}
    asdf local rust ${rust_version} || \
        (echo 'Rust version not yet installed, installing now...' && \
         asdf install rust ${rust_version} && \
         asdf local rust ${rust_version})

    touch README.md
    cargo init .
}}
map <space>crr :rust_init

# <space>cj for java
cmd gradle_init ${{
    set -eu
    trap 'catch' ERR
    function catch() {
        read -p 'Project init failed...' response
        exit 1
    }

    echo
    example_java='oracle-19.0.2'
    read -p 'Choose folder name: ' path_name
    echo "The following Java versions are installed on this machine:"
    asdf list java
    read -p "Choose Java version (${example_java}): " java_version

    if [ -z "${java_version}" ]; then
        java_version=${example_java}
    fi

    mkdir -p ${path_name}
    cd ${path_name}
    asdf local java ${java_version} || \
        (echo 'Java version not yet installed, installing now...' && \
         asdf install java ${java_version} && \
         asdf local java ${java_version})

    if [ $? -eq 0 ]; then
        gradle init \
            --type java-application \
            --test-framework junit-jupiter \
            --dsl groovy \
            --project-name `basename ${path_name}` \
            --package `basename ${path_name}`
    fi
}}
map <space>cjj :gradle_init

# <space>cg for git
cmd git_clone %{{
    echo 'Clone url: '
    read url
    target_folder=`basename $url|cut -d'.' -f1`
    if [ -e ${target_folder} ]; then
        echo "Folder \"${target_folder}\" exists. Clone fails"
    else
        git clone --depth 1 $url
    fi
}}
map <space>cgc : git_clone

cmd download ${{

    if [ -n "$1" ]; then
        url=$1
    else
        read -p "Download URL: " url
    fi

    output_path=$(basename $url)
    if [ -f $output_path ]; then
        read -n 1 -p "${output_path} already exist, continue? [y/N]: " response
        case $response in
            [yY]) ;;
            *) exit 1;;
        esac
    fi

    curl -L "$url" -o $output_path
}}
map <space>d :download


# <space>i for image-related function
# Convert to JPG
map <space>icj :convert_image jpg
cmd convert_image ${{
    if [[ $fs == "" ]]; then
        convert $f ${f%.*}.jpg > /dev/null 2>&1
    else
        for file in ${fs}; do
            convert $file ${file%.*}.jpg > /dev/null 2>&1
        done
    fi
}}
# vim: syntax=vim:commentstring=#\ %s
